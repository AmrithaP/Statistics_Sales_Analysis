event_space <- 1:6
probs <-1/6 * 6
print(event_space)
print("your code here")
event_space <- list(1:6)
probs <- list((1/6) * 6)
print(event_space)
print(probs)
print(expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
exp_value <- e
return (e)
}
event_space <- list(1:6)
probs <- list((1/6) * 6)
print(event_space)
print(probs)
print(expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
exp_value <- e
return (e)
}
event_space <- list(1:6)
probs <- list((1/6) * 6)
print(event_space)
print(probs)
print("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",e)
exp_value <- e
return (e)
}
event_space <- list(1:6)
probs <- list((1/6) * 6)
print(event_space)
print(probs)
print("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",paste(e))
exp_value <- e
return (e)
}
event_space <- list(1:6)
probs <- list((1/6) * 6)
print(event_space)
print(probs)
print("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",paste(e))
exp_value <- e
return (e)
}
event_space <- list(1:6)
probs <- list(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print(event_space)
print(probs)
print("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",paste(e))
exp_value <- e
return (e)
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print(event_space)
print(probs)
print("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",paste(e))
exp_value <- e
return (e)
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print(event_space)
print(probs)
print("Expected value",paste(expected_value(event_space,probs)))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",paste(e))
exp_value <- e
return (e)
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print(event_space)
print(probs)
cat("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- 0
for (i in event_space){
for (j in probs){
e <- (i*j)+e
}
}
print("inside",paste(e))
exp_value <- e
return (e)
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print(event_space)
print(probs)
cat("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- event_space*probs
return (sum(e))
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print(event_space)
print(probs)
cat("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- event_space*probs
return (sum(e))
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
print("Events:",event_space)
print("Probability",probs)
print("your code here")
expected_value <- function(event_space, probs) {
e <- event_space*probs
return (sum(e))
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
cat("Events:",event_space)
cat("Probability",probs)
cat("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- event_space*probs
return (sum(e))
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
cat("Events:",event_space,"\n")
cat("Probability",probs)
cat("Expected value",expected_value(event_space,probs))
print("your code here")
expected_value <- function(event_space, probs) {
e <- event_space*probs
return (sum(e))
}
event_space <- c(1:6)
probs <- c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6)
cat("Events:",event_space,"\n")
cat("Probability",probs,"\n")
cat("Expected value",expected_value(event_space,probs))
ggplot() +
geom_segment(mapping = aes(x = 1:6, y = 0, xend = 1:6, yend = 1/6)) +
geom_point(mapping = aes(x = 1:6, y = 1/6)) +
scale_y_continuous(breaks = c(0, 1/6, 1/3),
labels = c("0", "1/6", "1/3"),
limits = c(0, 1/3)) +
labs(title = "PMF for Rolling Dice",
x = "# of dots on the dice",
y = "Probability of Dice Roll") +
theme_minimal()
library(tidyverse)
ggplot() +
geom_segment(mapping = aes(x = 1:6, y = 0, xend = 1:6, yend = 1/6)) +
geom_point(mapping = aes(x = 1:6, y = 1/6)) +
scale_y_continuous(breaks = c(0, 1/6, 1/3),
labels = c("0", "1/6", "1/3"),
limits = c(0, 1/3)) +
labs(title = "PMF for Rolling Dice",
x = "# of dots on the dice",
y = "Probability of Dice Roll") +
theme_minimal()
x1 <- seq(0.5, 1.5, length.out = 200)
y1 <- dexp(x1)
x2 <- seq(2.5, 3.5, length.out = 200)
y2 <- dexp(x2)
ggplot() +
geom_area(mapping = aes(x = x1, y = y1), fill = "lightblue") +
geom_area(mapping = aes(x = x2, y = y2), fill = "pink") +
geom_function(xlim = c(0, 5), fun = dexp) +
geom_vline(mapping = aes(xintercept = c(0.5, 1.5)),
linetype = "dashed", color = "gray") +
geom_vline(mapping = aes(xintercept = c(2.5, 3.5)),
linetype = "dashed", color = "gray") +
labs(title = "PDF for Time Between Fish Catches",
x = "Hours since last catch",
y = "Probability Density") +
theme_minimal()
ggplot() +
geom_segment(mapping = aes(x = 0:1, xend = 0:1,
y = 0, yend = c(0.75, 0.25))) +
geom_point(mapping = aes(x = 0:1, y = c(0.75, 0.25))) +
scale_x_continuous(breaks = c(0, 1),
limits = c(-.5, 1.5)) +
scale_y_continuous(breaks = c(0, 0.25, 0.75, 1),
limits = c(0, 1)) +
labs(title = "PMF for Bernoulli Distribution",
x = "X",
y = "Probability") +
theme_minimal()
ggplot() +
geom_function(xlim = c(50, 90),
fun = function(x) dnorm(x, mean = 70, sd = 5)) +
labs(title = "PDF for the Normal Curve (mu = 70, sd = 5)",
x = "Estimated Value for mu",
y = "Probability Density") +
theme_minimal()
library(AmesHousing)
ames <- make_ames()  # see docs
ames |>
ggplot() +
geom_histogram(mapping = aes(x = Sale_Price),
colour='white') +
theme_hc()
ames |>
ggplot() +
geom_histogram(mapping = aes(x = Sale_Price),
colour='white') +
# theme_hc()
ames |>
ggplot() +
geom_histogram(mapping = aes(x = Sale_Price),
colour='white')# +
# theme_hc()
ames |>
ggplot() +
geom_histogram(mapping = aes(x = Mas_Vnr_Area),
colour='white') +
theme_hc()
ames |>
ggplot() +
geom_histogram(mapping = aes(x = Mas_Vnr_Area),
colour='white') #+
#  theme_hc()
ames |>
ggplot() +
geom_histogram(mapping = aes(x = Year_Built),
colour='white') #+
#  theme_hc()
# for sample size n, calculate sample average for m samples
sim_unif <- function (n, m, min=0, max=2) {
sim <- function (x) mean(runif(n, min, max))  # x is not used
x <- map_dbl(1:m,     # for each iteration in 1, 2, ..., m
sim)     # return the result of this function
df <- data.frame(
iter = 1:m,
sample_mean = x
)
df
}
n <- 5
m <- 20
sim_unif(n, m) |>
ggplot() +
geom_vline(xintercept = 1,
linetype = "dashed", color = "orange") +
geom_dotplot(mapping = aes(x = sample_mean),
fill = "lightblue",
alpha = 0.8) +
scale_x_continuous(limits = c(0, 2),
breaks = c(0, 1, 2)) +
labs(title = paste(m, "Samples of Size", n, "from Uniform Distribution"),
x = "Sample Mean",
y = "Proportion of All Samples") +
theme_hc()
