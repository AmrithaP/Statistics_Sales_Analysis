library(tidyverse)
library(ggthemes)
library(ggrepel)
library(effsize)
library(pwrss)
url_ <- "https://raw.githubusercontent.com/leontoddjohnson/i590/main/data/marketing/marketing.csv"
marketing <- read_delim(url_, delim = ",")
library(tidyverse)
library(ggthemes)
library(ggrepel)
library(effsize)
library(pwrss)
url_ <- "https://raw.githubusercontent.com/leontoddjohnson/i590/main/data/marketing/marketing.csv"
marketing <- read_delim(url_, delim = ",")
url_ <- "https://raw.githubusercontent.com/leontoddjohnson/i590/main/data/marketing/marketing.csv"
marketing <- read_delim(url_, delim = ',')
print("your code here")
view(marketing)
print("your code here")
view(marketing)
head(marketing)
print("your code here")
view(marketing)
head(marketing)
print("your code here")
#view(marketing)
head(marketing)
max(spend)
print("your code here")
#view(marketing)
head(marketing)
max(marketing$spend)
max(marketing$spend)
max(marketing$spend)
min(marketing$spend)
max(marketing$spend)
min(marketing$spend)
mean(marketing$spend)
# Null hypothesis -
marketing |>
ggplot() +
geom_boxplot(mapping = aes(x = revenue,
y = factor(display, levels = c(0, 1),
labels = c("Normal", "With Display")))) +
labs(title = "Advertisement Effect on Revenue",
x = "Revenue (in dollars)",
y = "Advertisement Variation") +
theme_minimal()
max(marketing$spend)
min(marketing$spend)
mean(marketing$spend)
# Null hypothesis - On an average the spendings done by the company every year is around 50$
#If we can spend < 50$ on ad then <200 clicks
#Average ctr no. display = ctr for display
#Average revenue = avg spend
#Average clicks stays sae as spend increases
unique(marketing$display)
# the same bootstrapping function from lab_06
bootstrap <- function (x, func=mean, n_iter=10^4) {
# empty vector to be filled with values from each iteration
func_values <- c(NULL)
# we simulate sampling `n_iter` times
for (i in 1:n_iter) {
# pull the sample (e.g., a vector or data frame)
x_sample <- sample_n(x, size = length(x), replace = TRUE)
# add on this iteration's value to the collection
func_values <- c(func_values, func(x_sample))
}
return(func_values)
}
diff_in_avg <- function (x_data) {
avg_revenues <- x_data |>
group_by(display) |>
summarize(avg_revenue = mean(revenue)) |>
arrange(display)
# difference = revenue_with - revenue_without
diff <- (avg_revenues$avg_revenue[2] -
avg_revenues$avg_revenue[1])
return(diff)
}
diffs_in_avgs <- bootstrap(marketing, diff_in_avg, n_iter = 100)
ggplot() +
geom_function(xlim = c(-300, 300),
fun = function(x) dnorm(x, mean = 0,
sd = sd(diffs_in_avgs))) +
geom_vline(mapping = aes(xintercept = observed_diff,
color = paste("observed: ",
round(observed_diff)))) +
labs(title = "Bootstrapped Sampling Distribution of Revenue Differences",
x = "Difference in Revenue Calculated",
y = "Probability Density",
color = "") +
scale_x_continuous(breaks = seq(-300, 300, 100)) +
theme_minimal()
avg_revenues <- marketing |>
group_by(display) |>
summarize(avg_revenue = mean(revenue)) |>
arrange(display)
avg_revenues
observed_diff <- (avg_revenues$avg_revenue[2] -
avg_revenues$avg_revenue[1])
paste("Observed Difference: ", observed_diff)
# the same bootstrapping function from lab_06
bootstrap <- function (x, func=mean, n_iter=10^4) {
# empty vector to be filled with values from each iteration
func_values <- c(NULL)
# we simulate sampling `n_iter` times
for (i in 1:n_iter) {
# pull the sample (e.g., a vector or data frame)
x_sample <- sample_n(x, size = length(x), replace = TRUE)
# add on this iteration's value to the collection
func_values <- c(func_values, func(x_sample))
}
return(func_values)
}
diff_in_avg <- function (x_data) {
avg_revenues <- x_data |>
group_by(display) |>
summarize(avg_revenue = mean(revenue)) |>
arrange(display)
# difference = revenue_with - revenue_without
diff <- (avg_revenues$avg_revenue[2] -
avg_revenues$avg_revenue[1])
return(diff)
}
diffs_in_avgs <- bootstrap(marketing, diff_in_avg, n_iter = 100)
ggplot() +
geom_function(xlim = c(-300, 300),
fun = function(x) dnorm(x, mean = 0,
sd = sd(diffs_in_avgs))) +
geom_vline(mapping = aes(xintercept = observed_diff,
color = paste("observed: ",
round(observed_diff)))) +
labs(title = "Bootstrapped Sampling Distribution of Revenue Differences",
x = "Difference in Revenue Calculated",
y = "Probability Density",
color = "") +
scale_x_continuous(breaks = seq(-300, 300, 100)) +
theme_minimal()
critical_value <- 2
delta <- 1.5
f_0 <- function(x) dnorm(x, mean = 0)
f_a <- function(x) dnorm(x, mean = delta)
ggplot() +
stat_function(mapping = aes(fill = 'power'),
fun = f_a,
xlim = c(critical_value, 4),
geom = "area") +
stat_function(mapping = aes(fill = 'alpha'),
fun = f_0,
xlim = c(critical_value, 4),
geom = "area") +
geom_function(mapping = aes(color = 'Null Hypothesis'),
xlim = c(-4, 4), fun = f_0) +
geom_function(mapping = aes(color = 'Alternative Hypothesis'),
xlim = c(-4, 4), fun = f_a) +
geom_vline(mapping = aes(xintercept = critical_value,
color = "Critical Value")) +
geom_vline(mapping = aes(xintercept = delta,
color = "Delta")) +
geom_vline(mapping = aes(xintercept = 0),
color = 'gray', linetype=2) +
labs(title = "One-Tailed Test Illustration",
subtitle = "(Mirror the right side for two-tailed tests.)",
x = "Test Statistic",
y = "Probability Density",
color = "",
fill = "") +
scale_x_continuous(breaks = seq(-4, 4, 1)) +
scale_fill_manual(values = c('lightblue', 'pink')) +
scale_color_manual(values = c('darkred', 'darkorange', 'darkblue',
'darkgreen')) +
theme_minimal()
marketing |>
group_by(display) |>
summarize(sd = sd(revenue),
mean = mean(revenue))
test <- pwrss.t.2means(mu1 = 100,
sd1 = sd(pluck(marketing, "revenue")),
kappa = 1,
power = .85, alpha = 0.1,
alternative = "not equal")
plot(test)
f_sampling <- function(x) dnorm(x, mean = 0,
sd = sd(diffs_in_avgs))
ggplot() +
stat_function(mapping = aes(fill = 'more extreme samples'),
fun = f_sampling,
xlim = c(observed_diff, 300),
geom = "area") +
geom_function(xlim = c(-300, 300),
fun = f_sampling) +
geom_vline(mapping = aes(xintercept = observed_diff,
color = paste("observed: ",
round(observed_diff, 1)))) +
labs(title = "Bootstrapped Sampling Distribution of Revenue Differences",
x = "Difference in Revenue Calculated",
y = "Probability Density",
color = "",
fill = "") +
scale_x_continuous(breaks = seq(-300, 300, 100)) +
scale_fill_manual(values = 'lightblue') +
theme_minimal()
f_sampling <- function(x) dnorm(x, mean = 0,
sd = sd(diffs_in_avgs))
ggplot() +
stat_function(mapping = aes(fill = 'more extreme samples'),
fun = f_sampling,
xlim = c(observed_diff, 300),
geom = "area") +
stat_function(mapping = aes(fill = 'more extreme samples'),
fun = f_sampling,
xlim = c(-observed_diff, -300),
geom = "area") +
geom_function(xlim = c(-300, 300),
fun = f_sampling) +
geom_vline(mapping = aes(xintercept = observed_diff,
color = paste("observed: ",
round(observed_diff, 1)))) +
labs(title = "Bootstrapped Sampling Distribution of Revenue Differences",
x = "Difference in Revenue Calculated",
y = "Probability Density",
color = "",
fill = "") +
scale_x_continuous(breaks = seq(-300, 300, 100)) +
scale_fill_manual(values = 'lightblue') +
theme_minimal()
# "demean" the bootstrapped samples to simulate mu = 0
diffs_in_avgs_d <- diffs_in_avgs - mean(diffs_in_avgs)
paste("p-value ",
sum(observed_diff < diffs_in_avgs_d) /
length(diffs_in_avgs_d))
# "demean" the bootstrapped samples to simulate mu = 0
diffs_in_avgs_d <- diffs_in_avgs - mean(diffs_in_avgs)
paste("p-value ",
sum(observed_diff < diffs_in_avgs_d) /
length(diffs_in_avgs_d))
paste("p-value ",
sum(abs(observed_diff) < abs(diffs_in_avgs_d)) /
length(diffs_in_avgs_d))
# "demean" the bootstrapped samples to simulate mu = 0
diffs_in_avgs_d <- diffs_in_avgs - mean(diffs_in_avgs)
paste("p-value ",
sum(observed_diff < diffs_in_avgs_d) /
length(diffs_in_avgs_d))
paste("p-value ",
sum(abs(observed_diff) < abs(diffs_in_avgs_d)) /
length(diffs_in_avgs_d))
ctr_trials <- marketing |>
group_by(display) |>
summarize(successes = sum(clicks),
trials = sum(impressions))
ctr_trials
prop.test(x = ctr_trials$successes,
n = ctr_trials$trials,
alternative = "two.sided")
ctr_table <- marketing |>
group_by(display) |>
summarize(clicks = sum(clicks),
non_clicks = sum(impressions) - sum(clicks))
ctr_table
