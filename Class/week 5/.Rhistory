# a data frame of *made-up* nurses
nurses <- tibble(
hair_length = abs(round(c(rnorm(90, 14, 3),
rnorm(10, 3, 3)))),
gender = c(rep("f", 90), rep("m", 10))
)
library(tidyverse)
library(ggthemes)
library(ggrepel)
# a data frame of *made-up* nurses
nurses <- tibble(
hair_length = abs(round(c(rnorm(90, 14, 3),
rnorm(10, 3, 3)))),
gender = c(rep("f", 90), rep("m", 10))
)
avg_length <- mean(nurses$hair_length)
nurses |>
ggplot() +
geom_jitter(mapping = aes(x = hair_length, y = "all data"),
shape = 1, size = 3, width=0, height=0.1) +
geom_vline(mapping = aes(xintercept = avg_length,
color = "Average Hair Length")) +
labs(title = "Made-Up Data for Nurse Hair Length",
colour = "",
x = "hair length", y = "") +
theme_hc()
avg_length <- mean(nurses$hair_length)
avg_lengths <- nurses |>
group_by(gender) |>
summarize(avg_hair = mean(hair_length))
nurses |>
ggplot() +
geom_jitter(mapping = aes(x = hair_length, y = gender),
shape = 1, size = 3, width=0, height=0.1) +
geom_point(data = avg_lengths,
mapping = aes(x = avg_hair, y = gender),
shape = "|", size = 12, color = "orange") +
geom_vline(mapping = aes(xintercept = avg_length,
color = "Average Hair Length")) +
labs(title = "Made-Up Data for Nurse Hair Length",
colour = "",
x = "hair length", y = "gender") +
theme_hc()
# suppose we weigh each row proportionally
nurses <- nurses |>
mutate(gender_weight = ifelse(gender == "m", 9, 1))
# global weighted average
avg_length_w <- weighted.mean(nurses$hair_length,
nurses$gender_weight)
# averages for each gender
avg_lengths <- nurses |>
group_by(gender) |>
summarize(avg_hair = mean(hair_length))
nurses |>
ggplot() +
geom_jitter(mapping = aes(x = hair_length, y = gender),
shape = 1, size = 3, width=0, height=0.1) +
geom_point(data = avg_lengths,
mapping = aes(x = avg_hair, y = gender),
shape = "|", size = 12, color = "orange") +
geom_vline(mapping = aes(xintercept = avg_length_w,
color = "Weighted Average Hair Length (9-1)")) +
labs(title = "Made-Up Data for Nurse Hair Length",
colour = "",
x = "hair length", y = "gender") +
theme_hc()
library(tidyverse)
library(ggthemes)
library(ggrepel)
# a data frame of *made-up* nurses
nurses <- tibble(
hair_length = abs(round(c(rnorm(90, 14, 3),
rnorm(10, 3, 3)))),
gender = c(rep("f", 90), rep("m", 10))
)
avg_length <- mean(nurses$hair_length)
nurses |>
ggplot() +
geom_jitter(mapping = aes(x = hair_length, y = "all data"),
shape = 1, size = 3, width=0, height=0.1) +
geom_vline(mapping = aes(xintercept = avg_length,
color = "Average Hair Length")) +
labs(title = "Made-Up Data for Nurse Hair Length",
colour = "",
x = "hair length", y = "") +
theme_hc()
avg_length <- mean(nurses$hair_length)
avg_lengths <- nurses |>
group_by(gender) |>
summarize(avg_hair = mean(hair_length))
nurses |>
ggplot() +
geom_jitter(mapping = aes(x = hair_length, y = gender),
shape = 1, size = 3, width=0, height=0.1) +
geom_point(data = avg_lengths,
mapping = aes(x = avg_hair, y = gender),
shape = "|", size = 12, color = "orange") +
geom_vline(mapping = aes(xintercept = avg_length,
color = "Average Hair Length")) +
labs(title = "Made-Up Data for Nurse Hair Length",
colour = "",
x = "hair length", y = "gender") +
theme_hc()
# suppose we weigh each row proportionally
nurses <- nurses |>
mutate(gender_weight = ifelse(gender == "m", 9, 1))
# global weighted average
avg_length_w <- weighted.mean(nurses$hair_length,
nurses$gender_weight)
# averages for each gender
avg_lengths <- nurses |>
group_by(gender) |>
summarize(avg_hair = mean(hair_length))
nurses |>
ggplot() +
geom_jitter(mapping = aes(x = hair_length, y = gender),
shape = 1, size = 3, width=0, height=0.1) +
geom_point(data = avg_lengths,
mapping = aes(x = avg_hair, y = gender),
shape = "|", size = 12, color = "orange") +
geom_vline(mapping = aes(xintercept = avg_length_w,
color = "Weighted Average Hair Length (9-1)")) +
labs(title = "Made-Up Data for Nurse Hair Length",
colour = "",
x = "hair length", y = "gender") +
theme_hc()
mpg |>
ggplot() +
geom_boxplot(mapping = aes(x = cty, y = "")) +
labs(title = "City Mileage from mpg data",
x = "city mileage", y = "") +
theme_classic()
mpg |>
ggplot() +
geom_boxplot(mapping = aes(x = cty, y = "")) +
geom_text_repel(data = filter(mpg, cty > 27),
mapping = aes(x = cty, y = "", label = model),
color = "darkred") +
labs(title = "City Mileage from mpg data",
x = "city mileage", y = "") +
theme_classic()
percentiles <- c(quantile(mpg$cty, 0.01),
quantile(mpg$cty, 0.99))
mpg |>
ggplot() +
geom_jitter(mapping = aes(x = cty, y = ""),
width = 0, height = 0.1) +
geom_vline(mapping = aes(xintercept = percentiles["1%"],
color = "2% percentile")) +
geom_vline(mapping = aes(xintercept = percentiles["99%"],
color = "98% percentile")) +
labs(title = "City Mileage from mpg data",
x = "city mileage", y = "", colour = "") +
scale_color_brewer(palette = "Dark2") +
theme_classic()
mpg |>
ggplot() +
geom_histogram(mapping = aes(x = cty), color = "white",
fill = "#3182bd") +
labs(title = "City Mileage from `mpg` Data",
x = "City Mileage", y = "") +
theme_classic()
mpg |>
ggplot() +
geom_boxplot(mapping = aes(x = cty, y = class)) +
geom_text_repel(data = filter(mpg, (cty > 25) & (class == "compact")),
mapping = aes(x = cty, y = class, label = model),
color = "darkred") +
labs(title = "City Mileage by Class",
x = "city mileage", y = "Class") +
theme_classic()
foods <- tibble(
food = c("asparagus", "celery", "chicken", "oatmeal"),
group = c("veggie", "veggie", "meat", "grain"),
calories = c(100, NA, 300, 50),
survey_year = c(2019, 2020, 2022, 2023),
survey_is_tasty = c("yes", "yes", "yes", "yes"),
)
foods
airquality |>
mutate(ozone_is_na = is.na(Ozone)) |>
ggplot() +
geom_bar(mapping = aes(x = Month, fill = ozone_is_na)) +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Missing Values by Month for Air Quality Dataset",
y = "Number of Rows",
fill = "Missing Ozone?") +
theme_classic()
airquality |>
mutate(radiation_measured = !is.na(Solar.R)) |>
ggplot() +
geom_point(mapping = aes(x = Temp, y = Wind,
color = radiation_measured),
shape = 1) +
scale_color_brewer(palette = "Set1") +
labs(color = "Solar.R Measurement Exists") +
theme_minimal() +
theme(legend.position="bottom")
mean(airquality$Ozone)
airquality |>
group_by(Month) |>
summarize(avg_ozone = mean(Ozone, na.rm = TRUE),
n_rows = n(),
n_missing = sum(is.na(Ozone)))
diamonds
view(diamonds)
unique(diamonds$cut)
unique(diamonds$cut)
unique(diamonds)
unique(diamonds$cut)
unique(diamonds$color)
unique(diamonds$cut)
unique(diamonds$color)
unique(diamonds$depth)
mpg |>
ggplot() +
geom_boxplot(mapping = aes(x = depth, y = cut)) +
#geom_text_repel(data = filter(mpg, (depth > 25) & (class == "compact")),
#               mapping = aes(x = cty, y = class, label = model),
#                color = "darkred") +
labs(title = "Depth by Cut",
x = "Depth", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = depth, y = cut)) +
#geom_text_repel(data = filter(mpg, (depth > 25) & (class == "compact")),
#               mapping = aes(x = cty, y = class, label = model),
#                color = "darkred") +
labs(title = "Depth by Cut",
x = "Depth", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
#geom_text_repel(data = filter(mpg, (depth > 25) & (class == "compact")),
#               mapping = aes(x = cty, y = class, label = model),
#                color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
geom_text_repel(data = filter(diamonds, (table > 25) ),
mapping = aes(x = table, y = cut, label = model),
color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
#geom_text_repel(data = filter(diamonds, (table > 25) ),
#                mapping = aes(x = table, y = cut, label = model),
#                color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
#geom_text_repel(data = filter(diamonds, (table > 70) ),
#                mapping = aes(x = table, y = cut, label = model),
#                color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
geom_text_repel(data = filter(diamonds, (table > 70) ),
mapping = aes(x = table, y = cut, label = model),
color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
geom_text_repel(data = filter(diamonds, (table > 70) ),
mapping = aes(x = table, y = cut),
color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
geom_text_repel(data = filter(diamonds, (table > 70) ),
mapping = aes(x = table, y = cut, label = model),
color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = table, y = cut)) +
#geom_text_repel(data = filter(diamonds, (table > 70) ),
#                mapping = aes(x = table, y = cut, label =),
#                color = "darkred") +
labs(title = "Table by Cut",
x = "Table", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = Price, y = cut)) +
#geom_text_repel(data = filter(mpg, (depth > 25) & (class == "compact")),
#               mapping = aes(x = cty, y = class, label = model),
#                color = "darkred") +
labs(title = "Price by Cut",
x = "Proce", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = Price, y = cut)) +
#geom_text_repel(data = filter(mpg, (depth > 25) & (class == "compact")),
#               mapping = aes(x = cty, y = class, label = model),
#                color = "darkred") +
labs(title = "Price by Cut",
x = "Price", y = "Cut") +
theme_classic()
diamonds |>
ggplot() +
geom_boxplot(mapping = aes(x = price, y = cut)) +
#geom_text_repel(data = filter(mpg, (depth > 25) & (class == "compact")),
#               mapping = aes(x = cty, y = class, label = model),
#                color = "darkred") +
labs(title = "Price by Cut",
x = "Price", y = "Cut") +
theme_classic()
